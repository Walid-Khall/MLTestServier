Metadata-Version: 2.1
Name: servier-package-walid-khall
Version: 0.0.1
Summary: A small example package
Home-page: https://github.com/pypa/sampleproject
Author: Example Author
Author-email: author@example.com
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/pypa/sampleproject/issues
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE

# Servier ML test
In this test, we will develop three Deep Learning models (Model1, Model2 and Mdel3).

We will creat a Flask api.

Finally, we will package the application and create a Docker image for the Flask api.

The project will include a web app where you can input a smile and get classification results . 

## Project Components
The project composed of a main Package including two subpackages.

1. Flask Web App
In a Python script, app.py, which is the web application.



2. Models
We find three moduls in this subpackage:

In a Python script, Model1.py, which is a machine learning pipeline that:

Loads data from the Dataset
Splits the dataset into training and test sets
Builds a  Deep Learning model
Trains and tunes a model using Keras
Outputs results on the test set
Exports the final model as a h5 file

In a Python script, Model2.py, which is a machine learning pipeline that:

Loads data from the Dataset
Splits the dataset into training and test sets
Builds a text processing and build a Deep Learning model
Trains and tunes a model using Keras
Outputs results on the test set
Exports the final model as a h5 file

In a Python script, Model3.py, which is a machine learning pipeline that:

Loads data from the Dataset
Splits the dataset into training and test sets
Builds a text processing and build a machine learning pipeline
Trains and tunes a model 
Outputs results on the test set
Exports the final model as a pickle file

3. Jupyter notebook with clean code for a general overview



## Instructions:

### Getting Started

### Installing Dependencies

#### Python 3.7

Follow instructions to install the latest version of python for your platform in the [python docs](https://docs.python.org/3/using/unix.html#getting-and-installing-the-latest-version-of-python)

#### Virtual Enviornment

We recommend working within a virtual environment whenever using Python for projects. This keeps your dependencies for each project separate and organaized. Instructions for setting up a virual enviornment for your platform can be found in the [python docs](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/)

#### PIP Dependencies

Once you have your virtual environment setup and running, install dependencies running:

```bash
pip install -r requirements.txt
```

This will install all of the required packages we selected within the `requirements.txt` file.



1. Run the following commands in the project's root directory to set up your database and model.

    - To run model1 ML pipeline that trains classifier and saves
        `python models/model1.py data/dataset_single.csv models/model1.h5`

    - To run model2 ML pipeline that trains classifier and saves
        `python models/model2.py data/dataset_single.csv models/model2.h5`

    - To run model3 ML pipeline that trains classifier and saves
        `python models/model3.py data/dataset_multi.csv models/model3.pkl`

2. Run the following command in the app's directory to run your web app.
    `python run.py`

3. Go to http://127.0.0.1:3001/

